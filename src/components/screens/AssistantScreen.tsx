import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Stethoscope, Send, Bot, User } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'ai' | 'user';
  timestamp: Date;
}

const AssistantScreen: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickSuggestions = [
    "Mes glyc√©mies sont √©lev√©es ce matin",
    "Comment calculer ma dose d'insuline ?",
    "Quoi manger avant l'exercice ?",
    "Sympt√¥mes d'hypoglyc√©mie ?"
  ];

  const welcomeMessage: Message = {
    id: 'welcome',
    text: `üëã Bonjour ! Je suis Dr. DARE, votre assistant endocrinologue IA.

Je peux vous aider avec :
- üìä Analyse de vos glyc√©mies
- üíâ Conseils sur l'insuline  
- üçΩÔ∏è Nutrition diab√©tique
- ‚ö†Ô∏è Gestion des hypo/hyperglyc√©mies
- üíä Questions sur votre traitement

*Disclaimer : Je compl√®te mais ne remplace pas votre m√©decin*

Comment puis-je vous aider aujourd'hui ?`,
    sender: 'ai',
    timestamp: new Date()
  };

  useEffect(() => {
    if (messages.length === 0) {
      setMessages([welcomeMessage]);
    }
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('glyc√©mie') && (lowerMessage.includes('√©lev√©') || lowerMessage.includes('haute'))) {
      return `üîç **Analyse de glyc√©mie √©lev√©e**

Les glyc√©mies √©lev√©es peuvent avoir plusieurs causes :

‚Ä¢ **Alimentation** : Repas trop riches en glucides
‚Ä¢ **M√©dication** : Dose d'insuline insuffisante ou oubli
‚Ä¢ **Stress** : Physique ou √©motionnel
‚Ä¢ **Maladie** : Infection ou inflammation
‚Ä¢ **Manque d'activit√©** : S√©dentarit√©

**Mes recommandations :**
1. V√©rifiez votre derni√®re injection d'insuline
2. Buvez de l'eau pour √©viter la d√©shydratation
3. √âvitez les glucides rapides temporairement
4. Surveillez l'apparition de c√©tones si >250 mg/dL
5. Contactez votre m√©decin si √ßa persiste

üí° *Astuce* : Tenez un journal alimentaire pour identifier les d√©clencheurs.`;
    }

    if (lowerMessage.includes('insuline') && (lowerMessage.includes('calcul') || lowerMessage.includes('dose'))) {
      return `üíâ **Calcul de dose d'insuline**

Le calcul d√©pend de plusieurs facteurs :

**Insuline rapide (repas) :**
‚Ä¢ Ratio glucides : 1U pour X grammes de glucides
‚Ä¢ Facteur de sensibilit√© : 1U fait baisser de X mg/dL
‚Ä¢ Glyc√©mie cible : g√©n√©ralement 100-120 mg/dL

**Formule de base :**
\`Dose = (Glucides √∑ Ratio) + (Glyc√©mie actuelle - Cible) √∑ Sensibilit√©\`

**Exemple :**
- Repas : 60g glucides
- Ratio : 1U/10g  
- Glyc√©mie : 180 mg/dL
- Cible : 120 mg/dL
- Sensibilit√© : 1U/30mg/dL

\`Dose = (60√∑10) + (180-120)√∑30 = 6 + 2 = 8 unit√©s\`

‚ö†Ô∏è **Important** : Ces ratios sont personnels et doivent √™tre valid√©s par votre endocrinologue.`;
    }

    if (lowerMessage.includes('exercice') || lowerMessage.includes('sport')) {
      return `üèÉ‚Äç‚ôÇÔ∏è **Diab√®te et exercice physique**

**Avant l'exercice :**
‚Ä¢ Glyc√©mie id√©ale : 150-180 mg/dL
‚Ä¢ Si < 100 mg/dL : collation avec 15-30g glucides
‚Ä¢ Si > 250 mg/dL : v√©rifiez les c√©tones

**Pendant l'exercice :**
‚Ä¢ Surveillez les signes d'hypoglyc√©mie
‚Ä¢ Gardez des glucides rapides √† port√©e
‚Ä¢ Hydratez-vous r√©guli√®rement

**Apr√®s l'exercice :**
‚Ä¢ Surveillez la glyc√©mie 2-4h apr√®s
‚Ä¢ Risque d'hypoglyc√©mie retard√©e
‚Ä¢ Adaptez l'insuline si n√©cessaire

**Types d'exercices :**
‚Ä¢ **A√©robie** (marche, v√©lo) : ‚Üì glyc√©mie
‚Ä¢ **Ana√©robie** (sprint, musculation) : ‚Üë glyc√©mie temporaire

ü•§ **Collations recommand√©es :** banane, dattes, boisson sportive dilu√©e.`;
    }

    if (lowerMessage.includes('hypoglyc√©mie') || lowerMessage.includes('hypo')) {
      return `‚ö†Ô∏è **Gestion de l'hypoglyc√©mie**

**Sympt√¥mes √† reconna√Ætre :**
- ü•µ Transpiration, tremblements
- üß† Confusion, irritabilit√©  
- ‚ù§Ô∏è Palpitations, faim intense
- üòµ Fatigue, vision floue

**R√®gle des 15 :**
1. **15g de glucides rapides** (3 sucres, 150ml jus)
2. **Attendre 15 minutes**
3. **Recontr√¥ler la glyc√©mie**
4. **R√©p√©ter si < 70 mg/dL**

**Apr√®s correction :**
- Prendre une collation si le repas est dans + de 1h
- Noter l'√©pisode dans votre carnet
- Analyser la cause avec votre m√©decin

**Pr√©vention :**
‚Ä¢ Ne sautez jamais de repas
‚Ä¢ Surveillez apr√®s l'exercice
‚Ä¢ Ajustez l'insuline en cas de changements
‚Ä¢ Portez toujours des glucides rapides

üö® **Si perte de connaissance** : injection de glucagon et appel d'urgence.`;
    }

    // R√©ponse g√©n√©rale
    return `ü©∫ **Merci pour votre question !**

Je suis l√† pour vous accompagner dans la gestion de votre diab√®te. 

Pour vous donner des conseils plus pr√©cis, pouvez-vous me dire :
- Votre type de diab√®te (Type 1 ou 2) ?
- Votre traitement actuel ?
- Le contexte de votre question ?

**Sujets que je ma√Ætrise :**
‚Ä¢ Analyse des glyc√©mies et tendances
‚Ä¢ Calculs de doses d'insuline
‚Ä¢ Nutrition et gestion des repas
‚Ä¢ Exercice physique et diab√®te
‚Ä¢ Gestion des hypo/hyperglyc√©mies
‚Ä¢ Effets secondaires des traitements

N'h√©sitez pas √† √™tre plus sp√©cifique, je suis l√† pour vous aider ! 

*Rappel : En cas d'urgence m√©dicale, contactez imm√©diatement votre m√©decin ou les services d'urgence.*`;
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(inputValue),
        sender: 'ai',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
  };

  const formatTimestamp = (date: Date) => {
    return date.toLocaleTimeString('fr-FR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="flex flex-col h-full bg-background">
      {/* Header */}
      <div className="bg-gradient-to-r from-medical-teal to-medical-green p-4 text-white">
        <div className="flex items-center space-x-3">
          <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
            <Stethoscope className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-semibold">Dr. DARE</h1>
            <p className="text-white/90 text-sm">Assistant Endocrinologue IA</p>
          </div>
          <div className="ml-auto">
            <Badge className="bg-white/20 text-white border-white/30">
              En ligne
            </Badge>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-[85%] ${
                message.sender === 'ai' 
                  ? 'bg-medical-teal/10 border-medical-teal/20' 
                  : 'bg-muted'
              } rounded-lg p-3 border`}
            >
              <div className="flex items-start space-x-2">
                {message.sender === 'ai' && (
                  <div className="w-6 h-6 bg-medical-teal rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <Bot className="w-3 h-3 text-white" />
                  </div>
                )}
                <div className="flex-1">
                  <div 
                    className={`text-sm whitespace-pre-wrap ${
                      message.sender === 'ai' ? 'text-foreground' : 'text-foreground'
                    }`}
                  >
                    {message.text}
                  </div>
                  <div className="text-xs text-muted-foreground mt-2">
                    {formatTimestamp(message.timestamp)}
                  </div>
                </div>
                {message.sender === 'user' && (
                  <div className="w-6 h-6 bg-medical-green rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <User className="w-3 h-3 text-white" />
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-medical-teal/10 border-medical-teal/20 rounded-lg p-3 border">
              <div className="flex items-center space-x-2">
                <div className="w-6 h-6 bg-medical-teal rounded-full flex items-center justify-center">
                  <Bot className="w-3 h-3 text-white" />
                </div>
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-medical-teal rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-medical-teal rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-medical-teal rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Quick Suggestions */}
      {messages.length === 1 && (
        <div className="p-4 border-t bg-muted/20">
          <p className="text-sm text-muted-foreground mb-3">Suggestions rapides :</p>
          <div className="flex flex-wrap gap-2">
            {quickSuggestions.map((suggestion, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                onClick={() => handleSuggestionClick(suggestion)}
                className="text-xs h-8 bg-white hover:bg-medical-teal/10 hover:border-medical-teal/30"
              >
                {suggestion}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t bg-background">
        <div className="flex space-x-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Posez votre question sur le diab√®te..."
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            className="flex-1"
          />
          <Button 
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            className="bg-medical-teal hover:bg-medical-teal/90"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
        <p className="text-xs text-muted-foreground mt-2 text-center">
          Assistant IA ‚Ä¢ Ne remplace pas un avis m√©dical professionnel
        </p>
      </div>
    </div>
  );
};

export default AssistantScreen;